
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b29  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d1  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000675  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000483  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003dd  00000000  00000000  000023fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  74:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:

/* Function definitions that deals with pins */

void DIO_SetPinDirection(u8 PortName,u8 PinNumber,u8 PinDirection)
{
	if(PinDirection==PIN_OUTPUT)
  7c:	41 30       	cpi	r20, 0x01	; 1
  7e:	b9 f5       	brne	.+110    	; 0xee <DIO_SetPinDirection+0x72>
	{
		switch(PortName)
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	a1 f0       	breq	.+40     	; 0xac <DIO_SetPinDirection+0x30>
  84:	18 f4       	brcc	.+6      	; 0x8c <DIO_SetPinDirection+0x10>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	31 f0       	breq	.+12     	; 0x96 <DIO_SetPinDirection+0x1a>
  8a:	08 95       	ret
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPinDirection+0x46>
  90:	84 30       	cpi	r24, 0x04	; 4
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPinDirection+0x5c>
  94:	08 95       	ret
		{	case PORT_A: SET_BIT(DDRA,PinNumber);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_SetPinDirection+0x24>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_SetPinDirection+0x20>
  a4:	9a b3       	in	r25, 0x1a	; 26
  a6:	89 2b       	or	r24, r25
  a8:	8a bb       	out	0x1a, r24	; 26
			break;
  aa:	08 95       	ret
			case PORT_B: SET_BIT(DDRB,PinNumber);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_SetPinDirection+0x3a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_SetPinDirection+0x36>
  ba:	97 b3       	in	r25, 0x17	; 23
  bc:	89 2b       	or	r24, r25
  be:	87 bb       	out	0x17, r24	; 23
			break;
  c0:	08 95       	ret
			case PORT_C: SET_BIT(DDRC,PinNumber);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_SetPinDirection+0x50>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_SetPinDirection+0x4c>
  d0:	94 b3       	in	r25, 0x14	; 20
  d2:	89 2b       	or	r24, r25
  d4:	84 bb       	out	0x14, r24	; 20
			break;
  d6:	08 95       	ret
			case PORT_D: SET_BIT(DDRD,PinNumber);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_SetPinDirection+0x66>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_SetPinDirection+0x62>
  e6:	91 b3       	in	r25, 0x11	; 17
  e8:	89 2b       	or	r24, r25
  ea:	81 bb       	out	0x11, r24	; 17
			break;
  ec:	08 95       	ret
		}
	}
	else if(PinDirection==PIN_INPUT)
  ee:	41 11       	cpse	r20, r1
  f0:	3a c0       	rjmp	.+116    	; 0x166 <DIO_SetPinDirection+0xea>
	{
		switch(PortName)
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	a9 f0       	breq	.+42     	; 0x120 <DIO_SetPinDirection+0xa4>
  f6:	18 f4       	brcc	.+6      	; 0xfe <DIO_SetPinDirection+0x82>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	31 f0       	breq	.+12     	; 0x108 <DIO_SetPinDirection+0x8c>
  fc:	08 95       	ret
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	d9 f0       	breq	.+54     	; 0x138 <DIO_SetPinDirection+0xbc>
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	29 f1       	breq	.+74     	; 0x150 <DIO_SetPinDirection+0xd4>
 106:	08 95       	ret
		{	case PORT_A: CLR_BIT(DDRA,PinNumber);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDirection+0x96>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDirection+0x92>
 116:	80 95       	com	r24
 118:	9a b3       	in	r25, 0x1a	; 26
 11a:	89 23       	and	r24, r25
 11c:	8a bb       	out	0x1a, r24	; 26
			break;
 11e:	08 95       	ret
			case PORT_B: CLR_BIT(DDRB,PinNumber);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0xae>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0xaa>
 12e:	80 95       	com	r24
 130:	97 b3       	in	r25, 0x17	; 23
 132:	89 23       	and	r24, r25
 134:	87 bb       	out	0x17, r24	; 23
			break;
 136:	08 95       	ret
			case PORT_C: CLR_BIT(DDRC,PinNumber);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDirection+0xc6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDirection+0xc2>
 146:	80 95       	com	r24
 148:	94 b3       	in	r25, 0x14	; 20
 14a:	89 23       	and	r24, r25
 14c:	84 bb       	out	0x14, r24	; 20
			break;
 14e:	08 95       	ret
			case PORT_D: CLR_BIT(DDRD,PinNumber);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDirection+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDirection+0xda>
 15e:	80 95       	com	r24
 160:	91 b3       	in	r25, 0x11	; 17
 162:	89 23       	and	r24, r25
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(u8 PortName,u8 PinNumber,u8 PinValue)
{
		if(PinValue==PIN_HIGH)
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	b9 f5       	brne	.+110    	; 0x1da <DIO_SetPinValue+0x72>
		{
			switch(PortName)
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	a1 f0       	breq	.+40     	; 0x198 <DIO_SetPinValue+0x30>
 170:	18 f4       	brcc	.+6      	; 0x178 <DIO_SetPinValue+0x10>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	31 f0       	breq	.+12     	; 0x182 <DIO_SetPinValue+0x1a>
 176:	08 95       	ret
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	c9 f0       	breq	.+50     	; 0x1ae <DIO_SetPinValue+0x46>
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	11 f1       	breq	.+68     	; 0x1c4 <DIO_SetPinValue+0x5c>
 180:	08 95       	ret
			{	case PORT_A: SET_BIT(PORTA,PinNumber);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinValue+0x24>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinValue+0x20>
 190:	9b b3       	in	r25, 0x1b	; 27
 192:	89 2b       	or	r24, r25
 194:	8b bb       	out	0x1b, r24	; 27
				break;
 196:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,PinNumber);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinValue+0x3a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinValue+0x36>
 1a6:	98 b3       	in	r25, 0x18	; 24
 1a8:	89 2b       	or	r24, r25
 1aa:	88 bb       	out	0x18, r24	; 24
				break;
 1ac:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,PinNumber);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_SetPinValue+0x50>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_SetPinValue+0x4c>
 1bc:	95 b3       	in	r25, 0x15	; 21
 1be:	89 2b       	or	r24, r25
 1c0:	85 bb       	out	0x15, r24	; 21
				break;
 1c2:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,PinNumber);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_SetPinValue+0x66>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_SetPinValue+0x62>
 1d2:	92 b3       	in	r25, 0x12	; 18
 1d4:	89 2b       	or	r24, r25
 1d6:	82 bb       	out	0x12, r24	; 18
				break;
 1d8:	08 95       	ret
			}
		}
		else if(PinValue==PIN_LOW)
 1da:	41 11       	cpse	r20, r1
 1dc:	3a c0       	rjmp	.+116    	; 0x252 <DIO_SetPinValue+0xea>
		{
			switch(PortName)
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	a9 f0       	breq	.+42     	; 0x20c <DIO_SetPinValue+0xa4>
 1e2:	18 f4       	brcc	.+6      	; 0x1ea <DIO_SetPinValue+0x82>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <DIO_SetPinValue+0x8c>
 1e8:	08 95       	ret
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	d9 f0       	breq	.+54     	; 0x224 <DIO_SetPinValue+0xbc>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	29 f1       	breq	.+74     	; 0x23c <DIO_SetPinValue+0xd4>
 1f2:	08 95       	ret
			{	case PORT_A: CLR_BIT(PORTA,PinNumber);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinValue+0x96>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinValue+0x92>
 202:	80 95       	com	r24
 204:	9b b3       	in	r25, 0x1b	; 27
 206:	89 23       	and	r24, r25
 208:	8b bb       	out	0x1b, r24	; 27
				break;
 20a:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,PinNumber);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinValue+0xae>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinValue+0xaa>
 21a:	80 95       	com	r24
 21c:	98 b3       	in	r25, 0x18	; 24
 21e:	89 23       	and	r24, r25
 220:	88 bb       	out	0x18, r24	; 24
				break;
 222:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,PinNumber);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinValue+0xc6>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinValue+0xc2>
 232:	80 95       	com	r24
 234:	95 b3       	in	r25, 0x15	; 21
 236:	89 23       	and	r24, r25
 238:	85 bb       	out	0x15, r24	; 21
				break;
 23a:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,PinNumber);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinValue+0xde>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinValue+0xda>
 24a:	80 95       	com	r24
 24c:	92 b3       	in	r25, 0x12	; 18
 24e:	89 23       	and	r24, r25
 250:	82 bb       	out	0x12, r24	; 18
 252:	08 95       	ret

00000254 <GI_EnabledOrDisabled>:
#include "GI_Interface.h"
#include "GI_Private.h"

void GI_EnabledOrDisabled(u8 GI_State)
{
	switch(GI_State)
 254:	88 23       	and	r24, r24
 256:	31 f0       	breq	.+12     	; 0x264 <GI_EnabledOrDisabled+0x10>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	39 f4       	brne	.+14     	; 0x26a <GI_EnabledOrDisabled+0x16>
	{
		case ENABLED:
		SET_BIT(SREG,SREG_I);
 25c:	8f b7       	in	r24, 0x3f	; 63
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	8f bf       	out	0x3f, r24	; 63
		break;
 262:	08 95       	ret
		
		case DISABLED:
		CLR_BIT(SREG,SREG_I);
 264:	8f b7       	in	r24, 0x3f	; 63
 266:	8f 77       	andi	r24, 0x7F	; 127
 268:	8f bf       	out	0x3f, r24	; 63
 26a:	08 95       	ret

0000026c <main>:
#include "TIMER0_Interface.h"
#include "GI_Interface.h"

int main(void)
{
	DIO_SetPinDirection(PORT_A,PIN0,PIN_OUTPUT);
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_A,PIN1,PIN_OUTPUT);
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	GI_EnabledOrDisabled(ENABLED);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 2a 01 	call	0x254	; 0x254 <GI_EnabledOrDisabled>
	TIMER_Init();
 286:	0e 94 62 01 	call	0x2c4	; 0x2c4 <TIMER_Init>
	
    while (1) 
    {
	 
				DIO_SetPinValue(PORT_A,PIN1,PIN_HIGH);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	2f e7       	ldi	r18, 0x7F	; 127
 296:	8a e1       	ldi	r24, 0x1A	; 26
 298:	96 e0       	ldi	r25, 0x06	; 6
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x2e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x38>
 2a4:	00 00       	nop
				_delay_ms(2000);
					DIO_SetPinValue(PORT_A,PIN1,PIN_LOW);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_SetPinValue>
 2b0:	2f e7       	ldi	r18, 0x7F	; 127
 2b2:	8a e1       	ldi	r24, 0x1A	; 26
 2b4:	96 e0       	ldi	r25, 0x06	; 6
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x4a>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x54>
 2c0:	00 00       	nop
 2c2:	e3 cf       	rjmp	.-58     	; 0x28a <main+0x1e>

000002c4 <TIMER_Init>:
#include "TIMER0_Interface.h"

void TIMER_Init()
{
	//set mode-->normal ,set clock ---> prescaler
	CLR_BIT(TCCR0,3);  // WGMO1
 2c4:	83 b7       	in	r24, 0x33	; 51
 2c6:	87 7f       	andi	r24, 0xF7	; 247
 2c8:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);  // WGM00
 2ca:	83 b7       	in	r24, 0x33	; 51
 2cc:	8f 7b       	andi	r24, 0xBF	; 191
 2ce:	83 bf       	out	0x33, r24	; 51
	//set prescaler --> /8
	CLR_BIT(TCCR0,0); //CS00
 2d0:	83 b7       	in	r24, 0x33	; 51
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1); //CS01
 2d6:	83 b7       	in	r24, 0x33	; 51
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2); //CS02
 2dc:	83 b7       	in	r24, 0x33	; 51
 2de:	8b 7f       	andi	r24, 0xFB	; 251
 2e0:	83 bf       	out	0x33, r24	; 51
	// Enable Interrupt overflow
	SET_BIT(TIMSK,0);
 2e2:	89 b7       	in	r24, 0x39	; 57
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	89 bf       	out	0x39, r24	; 57
	// Enable Interrupt Compare Match
	SET_BIT(TIMSK,1);
 2e8:	89 b7       	in	r24, 0x39	; 57
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	89 bf       	out	0x39, r24	; 57
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
