
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000534  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f08  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000811  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000078e  00000000  00000000  00001e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  000025a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b5  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ee  00000000  00000000  00002bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000032bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  7a:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
void ADC_Init(void)
{
	//Bits of Control Register
	
	// Polling ->no interrupt,no SIE 
	CLR_BIT(ADCSRA,3);	//ADIE->0
  82:	86 b1       	in	r24, 0x06	; 6
  84:	87 7f       	andi	r24, 0xF7	; 247
  86:	86 b9       	out	0x06, r24	; 6
	// Clear ADLAR to Read 10 bit
	CLR_BIT(ADMUX,5);	// ADLAR->0	
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	8f 7d       	andi	r24, 0xDF	; 223
  8c:	87 b9       	out	0x07, r24	; 7
	// refrence selection  =AVCC
	SET_BIT(ADMUX,6);   //REFS0
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	80 64       	ori	r24, 0x40	; 64
  92:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);	//REFS1
  94:	87 b1       	in	r24, 0x07	; 7
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	87 b9       	out	0x07, r24	; 7
	//Prescaler /64
	CLR_BIT(ADCSRA,0);  //ADPS0
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);	//ADPS1
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);	//ADPS2
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	86 b9       	out	0x06, r24	; 6
	//Enable ADC
	SET_BIT(ADCSRA,7);  //ADEN
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	86 b9       	out	0x06, r24	; 6
  b2:	08 95       	ret

000000b4 <ADC_Convert>:
	
}
u16 ADC_Convert(u8 ChannelIdx)
{
	// Select Required Channel
	ADMUX &=0b11100000;
  b4:	97 b1       	in	r25, 0x07	; 7
  b6:	90 7e       	andi	r25, 0xE0	; 224
  b8:	97 b9       	out	0x07, r25	; 7
	ADMUX|=ChannelIdx; 
  ba:	97 b1       	in	r25, 0x07	; 7
  bc:	89 2b       	or	r24, r25
  be:	87 b9       	out	0x07, r24	; 7
	//Start Conversion
	SET_BIT(ADCSRA,6); // ADSC
  c0:	86 b1       	in	r24, 0x06	; 6
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	86 b9       	out	0x06, r24	; 6
	//Polling till the flag is rasied
	while(GET_BIT(ADCSRA,4)==0); //ADIF
  c6:	86 b1       	in	r24, 0x06	; 6
  c8:	82 95       	swap	r24
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	e1 f3       	breq	.-8      	; 0xc6 <ADC_Convert+0x12>
	//clear Flag
	SET_BIT(ADCSRA,4);  //ADIF--> here is cleares by writing logical 1 on the flag
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	86 b9       	out	0x06, r24	; 6
	return ADC_OUTPUT;
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	95 b1       	in	r25, 0x05	; 5
}
  d8:	08 95       	ret

000000da <CLCD_SendData>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	cf 93       	push	r28
  dc:	c8 2f       	mov	r28, r24
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_SetPinValue>
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_SetPinValue>
  f2:	6c 2f       	mov	r22, r28
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPortValue>
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_SetPinValue>
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <CLCD_SendData+0x2e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <CLCD_SendData+0x34>
 10e:	00 00       	nop
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_SetPinValue>
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <CLCD_SendCommond>:
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_SetPinValue>
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_SetPinValue>
 136:	6c 2f       	mov	r22, r28
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPortValue>
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_SetPinValue>
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <CLCD_SendCommond+0x2e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <CLCD_SendCommond+0x34>
 152:	00 00       	nop
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_SetPinValue>
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <CLCD_Init>:
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	97 e2       	ldi	r25, 0x27	; 39
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <CLCD_Init+0x4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <CLCD_Init+0xa>
 16c:	00 00       	nop
 16e:	88 e3       	ldi	r24, 0x38	; 56
 170:	0e 94 8f 00 	call	0x11e	; 0x11e <CLCD_SendCommond>
 174:	89 ef       	ldi	r24, 0xF9	; 249
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <CLCD_Init+0x16>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <CLCD_Init+0x1c>
 17e:	00 00       	nop
 180:	8f e0       	ldi	r24, 0x0F	; 15
 182:	0e 94 8f 00 	call	0x11e	; 0x11e <CLCD_SendCommond>
 186:	89 ef       	ldi	r24, 0xF9	; 249
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <CLCD_Init+0x28>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <CLCD_Init+0x2e>
 190:	00 00       	nop
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 8f 00 	call	0x11e	; 0x11e <CLCD_SendCommond>
 198:	83 ef       	ldi	r24, 0xF3	; 243
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <CLCD_Init+0x3a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <CLCD_Init+0x40>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <CLCD_SendString>:
{
	CLCD_SendCommond(0x01);  // Clear Screan;
	_delay_ms(2);
}
void CLCD_SendString(u8 *PtrToString)
{
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	8c 01       	movw	r16, r24
	u8 i=0;	
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
	while(PtrToString[i] !='\0')
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <CLCD_SendString+0x12>
	{
		CLCD_SendData(PtrToString[i]);
 1b2:	0e 94 6d 00 	call	0xda	; 0xda <CLCD_SendData>
		i++;
 1b6:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);
}
void CLCD_SendString(u8 *PtrToString)
{
	u8 i=0;	
	while(PtrToString[i] !='\0')
 1b8:	f8 01       	movw	r30, r16
 1ba:	ec 0f       	add	r30, r28
 1bc:	f1 1d       	adc	r31, r1
 1be:	80 81       	ld	r24, Z
 1c0:	81 11       	cpse	r24, r1
 1c2:	f7 cf       	rjmp	.-18     	; 0x1b2 <CLCD_SendString+0xc>
	{
		CLCD_SendData(PtrToString[i]);
		i++;
	}
}
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	08 95       	ret

000001cc <CLCD_SetPosition>:


void CLCD_SetPosition(u8 xPos, u8 yPos)
{
	u8 Location;
	switch(xPos)
 1cc:	88 23       	and	r24, r24
 1ce:	29 f0       	breq	.+10     	; 0x1da <CLCD_SetPosition+0xe>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	21 f4       	brne	.+8      	; 0x1dc <CLCD_SetPosition+0x10>
	{
		case 0: Location= yPos;break;
		case 1: Location=yPos+0x40;break;
 1d4:	90 e4       	ldi	r25, 0x40	; 64
 1d6:	96 0f       	add	r25, r22
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <CLCD_SetPosition+0x10>
void CLCD_SetPosition(u8 xPos, u8 yPos)
{
	u8 Location;
	switch(xPos)
	{
		case 0: Location= yPos;break;
 1da:	96 2f       	mov	r25, r22
		case 1: Location=yPos+0x40;break;
	}
	CLCD_SendCommond(Location+128);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	89 0f       	add	r24, r25
 1e0:	0e 94 8f 00 	call	0x11e	; 0x11e <CLCD_SendCommond>
 1e4:	08 95       	ret

000001e6 <CLCD_SendNumber>:
}
void CLCD_SendNumber(u8 Num)
{
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	2a 97       	sbiw	r28, 0x0a	; 10
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
	char buffer[10]; 
	int i = 0;
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	01 c0       	rjmp	.+2      	; 0x206 <CLCD_SendNumber+0x20>
		CLCD_SendData('-');  // Send the negative sign 
		Num = -Num;          // Convert the negative into positive
	}
	// Convert the number into ascii
	do {
		buffer[i++] = (Num % 10) + '0'; // Convert the last digit into Ascii
 204:	8a 01       	movw	r16, r20
 206:	a8 01       	movw	r20, r16
 208:	4f 5f       	subi	r20, 0xFF	; 255
 20a:	5f 4f       	sbci	r21, 0xFF	; 255
 20c:	e1 e0       	ldi	r30, 0x01	; 1
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ec 0f       	add	r30, r28
 212:	fd 1f       	adc	r31, r29
 214:	e0 0f       	add	r30, r16
 216:	f1 1f       	adc	r31, r17
 218:	9d ec       	ldi	r25, 0xCD	; 205
 21a:	89 9f       	mul	r24, r25
 21c:	91 2d       	mov	r25, r1
 21e:	11 24       	eor	r1, r1
 220:	96 95       	lsr	r25
 222:	96 95       	lsr	r25
 224:	96 95       	lsr	r25
 226:	39 2f       	mov	r19, r25
 228:	33 0f       	add	r19, r19
 22a:	23 2f       	mov	r18, r19
 22c:	22 0f       	add	r18, r18
 22e:	22 0f       	add	r18, r18
 230:	23 0f       	add	r18, r19
 232:	82 1b       	sub	r24, r18
 234:	80 5d       	subi	r24, 0xD0	; 208
 236:	80 83       	st	Z, r24
		Num /= 10; 
 238:	89 2f       	mov	r24, r25
	} while (Num > 0);
 23a:	91 11       	cpse	r25, r1
 23c:	e3 cf       	rjmp	.-58     	; 0x204 <CLCD_SendNumber+0x1e>
 23e:	0b c0       	rjmp	.+22     	; 0x256 <CLCD_SendNumber+0x70>
	// Print numbers in reverse order
	for (int j = i - 1; j >= 0; j--) {
		CLCD_SendData(buffer[j]);
 240:	e1 e0       	ldi	r30, 0x01	; 1
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ec 0f       	add	r30, r28
 246:	fd 1f       	adc	r31, r29
 248:	e0 0f       	add	r30, r16
 24a:	f1 1f       	adc	r31, r17
 24c:	80 81       	ld	r24, Z
 24e:	0e 94 6d 00 	call	0xda	; 0xda <CLCD_SendData>
	do {
		buffer[i++] = (Num % 10) + '0'; // Convert the last digit into Ascii
		Num /= 10; 
	} while (Num > 0);
	// Print numbers in reverse order
	for (int j = i - 1; j >= 0; j--) {
 252:	01 50       	subi	r16, 0x01	; 1
 254:	11 09       	sbc	r17, r1
 256:	11 23       	and	r17, r17
 258:	9c f7       	brge	.-26     	; 0x240 <CLCD_SendNumber+0x5a>
		CLCD_SendData(buffer[j]);
	}
	
}
 25a:	2a 96       	adiw	r28, 0x0a	; 10
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <DIO_SetPinDirection>:
		break;
		case PORT_D:PinState=GET_BIT(PIND,PinNumber);
		break;
	}
	return PinState;	
}
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	b9 f5       	brne	.+110    	; 0x2e2 <DIO_SetPinDirection+0x72>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	a1 f0       	breq	.+40     	; 0x2a0 <DIO_SetPinDirection+0x30>
 278:	18 f4       	brcc	.+6      	; 0x280 <DIO_SetPinDirection+0x10>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	31 f0       	breq	.+12     	; 0x28a <DIO_SetPinDirection+0x1a>
 27e:	08 95       	ret
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	c9 f0       	breq	.+50     	; 0x2b6 <DIO_SetPinDirection+0x46>
 284:	84 30       	cpi	r24, 0x04	; 4
 286:	11 f1       	breq	.+68     	; 0x2cc <DIO_SetPinDirection+0x5c>
 288:	08 95       	ret
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_SetPinDirection+0x24>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_SetPinDirection+0x20>
 298:	9a b3       	in	r25, 0x1a	; 26
 29a:	89 2b       	or	r24, r25
 29c:	8a bb       	out	0x1a, r24	; 26
 29e:	08 95       	ret
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_SetPinDirection+0x3a>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_SetPinDirection+0x36>
 2ae:	97 b3       	in	r25, 0x17	; 23
 2b0:	89 2b       	or	r24, r25
 2b2:	87 bb       	out	0x17, r24	; 23
 2b4:	08 95       	ret
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_SetPinDirection+0x50>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_SetPinDirection+0x4c>
 2c4:	94 b3       	in	r25, 0x14	; 20
 2c6:	89 2b       	or	r24, r25
 2c8:	84 bb       	out	0x14, r24	; 20
 2ca:	08 95       	ret
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_SetPinDirection+0x66>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_SetPinDirection+0x62>
 2da:	91 b3       	in	r25, 0x11	; 17
 2dc:	89 2b       	or	r24, r25
 2de:	81 bb       	out	0x11, r24	; 17
 2e0:	08 95       	ret
 2e2:	41 11       	cpse	r20, r1
 2e4:	3a c0       	rjmp	.+116    	; 0x35a <DIO_SetPinDirection+0xea>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	a9 f0       	breq	.+42     	; 0x314 <DIO_SetPinDirection+0xa4>
 2ea:	18 f4       	brcc	.+6      	; 0x2f2 <DIO_SetPinDirection+0x82>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	31 f0       	breq	.+12     	; 0x2fc <DIO_SetPinDirection+0x8c>
 2f0:	08 95       	ret
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	d9 f0       	breq	.+54     	; 0x32c <DIO_SetPinDirection+0xbc>
 2f6:	84 30       	cpi	r24, 0x04	; 4
 2f8:	29 f1       	breq	.+74     	; 0x344 <DIO_SetPinDirection+0xd4>
 2fa:	08 95       	ret
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_SetPinDirection+0x96>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_SetPinDirection+0x92>
 30a:	80 95       	com	r24
 30c:	9a b3       	in	r25, 0x1a	; 26
 30e:	89 23       	and	r24, r25
 310:	8a bb       	out	0x1a, r24	; 26
 312:	08 95       	ret
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_SetPinDirection+0xae>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_SetPinDirection+0xaa>
 322:	80 95       	com	r24
 324:	97 b3       	in	r25, 0x17	; 23
 326:	89 23       	and	r24, r25
 328:	87 bb       	out	0x17, r24	; 23
 32a:	08 95       	ret
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_SetPinDirection+0xc6>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_SetPinDirection+0xc2>
 33a:	80 95       	com	r24
 33c:	94 b3       	in	r25, 0x14	; 20
 33e:	89 23       	and	r24, r25
 340:	84 bb       	out	0x14, r24	; 20
 342:	08 95       	ret
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_SetPinDirection+0xde>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_SetPinDirection+0xda>
 352:	80 95       	com	r24
 354:	91 b3       	in	r25, 0x11	; 17
 356:	89 23       	and	r24, r25
 358:	81 bb       	out	0x11, r24	; 17
 35a:	08 95       	ret

0000035c <DIO_SetPinValue>:
 35c:	41 30       	cpi	r20, 0x01	; 1
 35e:	b9 f5       	brne	.+110    	; 0x3ce <DIO_SetPinValue+0x72>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	a1 f0       	breq	.+40     	; 0x38c <DIO_SetPinValue+0x30>
 364:	18 f4       	brcc	.+6      	; 0x36c <DIO_SetPinValue+0x10>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	31 f0       	breq	.+12     	; 0x376 <DIO_SetPinValue+0x1a>
 36a:	08 95       	ret
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	c9 f0       	breq	.+50     	; 0x3a2 <DIO_SetPinValue+0x46>
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	11 f1       	breq	.+68     	; 0x3b8 <DIO_SetPinValue+0x5c>
 374:	08 95       	ret
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_SetPinValue+0x24>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_SetPinValue+0x20>
 384:	9b b3       	in	r25, 0x1b	; 27
 386:	89 2b       	or	r24, r25
 388:	8b bb       	out	0x1b, r24	; 27
 38a:	08 95       	ret
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_SetPinValue+0x3a>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_SetPinValue+0x36>
 39a:	98 b3       	in	r25, 0x18	; 24
 39c:	89 2b       	or	r24, r25
 39e:	88 bb       	out	0x18, r24	; 24
 3a0:	08 95       	ret
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_SetPinValue+0x50>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_SetPinValue+0x4c>
 3b0:	95 b3       	in	r25, 0x15	; 21
 3b2:	89 2b       	or	r24, r25
 3b4:	85 bb       	out	0x15, r24	; 21
 3b6:	08 95       	ret
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_SetPinValue+0x66>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_SetPinValue+0x62>
 3c6:	92 b3       	in	r25, 0x12	; 18
 3c8:	89 2b       	or	r24, r25
 3ca:	82 bb       	out	0x12, r24	; 18
 3cc:	08 95       	ret
 3ce:	41 11       	cpse	r20, r1
 3d0:	3a c0       	rjmp	.+116    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	a9 f0       	breq	.+42     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d6:	18 f4       	brcc	.+6      	; 0x3de <DIO_SetPinValue+0x82>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	31 f0       	breq	.+12     	; 0x3e8 <DIO_SetPinValue+0x8c>
 3dc:	08 95       	ret
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	d9 f0       	breq	.+54     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	29 f1       	breq	.+74     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3e6:	08 95       	ret
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_SetPinValue+0x96>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_SetPinValue+0x92>
 3f6:	80 95       	com	r24
 3f8:	9b b3       	in	r25, 0x1b	; 27
 3fa:	89 23       	and	r24, r25
 3fc:	8b bb       	out	0x1b, r24	; 27
 3fe:	08 95       	ret
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	80 95       	com	r24
 410:	98 b3       	in	r25, 0x18	; 24
 412:	89 23       	and	r24, r25
 414:	88 bb       	out	0x18, r24	; 24
 416:	08 95       	ret
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	80 95       	com	r24
 428:	95 b3       	in	r25, 0x15	; 21
 42a:	89 23       	and	r24, r25
 42c:	85 bb       	out	0x15, r24	; 21
 42e:	08 95       	ret
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	80 95       	com	r24
 440:	92 b3       	in	r25, 0x12	; 18
 442:	89 23       	and	r24, r25
 444:	82 bb       	out	0x12, r24	; 18
 446:	08 95       	ret

00000448 <DIO_SetPortDirection>:

/* Function definitions that deals with pins */

void DIO_SetPortDirection(u8 Portname,u8 PortDirection)
{
	switch(Portname)
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	59 f0       	breq	.+22     	; 0x462 <DIO_SetPortDirection+0x1a>
 44c:	18 f4       	brcc	.+6      	; 0x454 <DIO_SetPortDirection+0xc>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	31 f0       	breq	.+12     	; 0x45e <DIO_SetPortDirection+0x16>
 452:	08 95       	ret
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	39 f0       	breq	.+14     	; 0x466 <DIO_SetPortDirection+0x1e>
 458:	84 30       	cpi	r24, 0x04	; 4
 45a:	39 f0       	breq	.+14     	; 0x46a <DIO_SetPortDirection+0x22>
 45c:	08 95       	ret
	{
		case PORT_A: DDRA=PortDirection;
 45e:	6a bb       	out	0x1a, r22	; 26
		break;
 460:	08 95       	ret
		case PORT_B: DDRB=PortDirection;
 462:	67 bb       	out	0x17, r22	; 23
		break;
 464:	08 95       	ret
		case PORT_C: DDRC=PortDirection;
 466:	64 bb       	out	0x14, r22	; 20
		break;
 468:	08 95       	ret
		case PORT_D: DDRD=PortDirection;
 46a:	61 bb       	out	0x11, r22	; 17
 46c:	08 95       	ret

0000046e <DIO_SetPortValue>:
		break;
	}
}
void DIO_SetPortValue(u8 Portname,u8 PortValue)
{
	switch(Portname)
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	59 f0       	breq	.+22     	; 0x488 <DIO_SetPortValue+0x1a>
 472:	18 f4       	brcc	.+6      	; 0x47a <DIO_SetPortValue+0xc>
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	31 f0       	breq	.+12     	; 0x484 <DIO_SetPortValue+0x16>
 478:	08 95       	ret
 47a:	83 30       	cpi	r24, 0x03	; 3
 47c:	39 f0       	breq	.+14     	; 0x48c <DIO_SetPortValue+0x1e>
 47e:	84 30       	cpi	r24, 0x04	; 4
 480:	39 f0       	breq	.+14     	; 0x490 <DIO_SetPortValue+0x22>
 482:	08 95       	ret
	{
		case PORT_A: PORTA=PortValue;
 484:	6b bb       	out	0x1b, r22	; 27
		break;
 486:	08 95       	ret
		case PORT_B: PORTB=PortValue;
 488:	68 bb       	out	0x18, r22	; 24
		break;
 48a:	08 95       	ret
		case PORT_C: PORTC=PortValue;
 48c:	65 bb       	out	0x15, r22	; 21
		break;
 48e:	08 95       	ret
		case PORT_D: PORTD=PortValue;
 490:	62 bb       	out	0x12, r22	; 18
 492:	08 95       	ret

00000494 <main>:
{
	u16 DigReading;
	u16 AnalogValue;
	u8 TempValue;
	//Configure The PA0 Input For Analog value(ADC)
	DIO_SetPinDirection(PORT_A,PIN0,PIN_INPUT);
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 38 01 	call	0x270	; 0x270 <DIO_SetPinDirection>
	// Configure LCD Pins ->output
	DIO_SetPortDirection(PORT_D,PORT_OUTPUT);
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	84 e0       	ldi	r24, 0x04	; 4
 4a2:	0e 94 24 02 	call	0x448	; 0x448 <DIO_SetPortDirection>
	// LCD bits Control
	DIO_SetPortDirection(PORT_C,0b00000111);
 4a6:	67 e0       	ldi	r22, 0x07	; 7
 4a8:	83 e0       	ldi	r24, 0x03	; 3
 4aa:	0e 94 24 02 	call	0x448	; 0x448 <DIO_SetPortDirection>
	ADC_Init();
 4ae:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	CLCD_Init();
 4b2:	0e 94 b1 00 	call	0x162	; 0x162 <CLCD_Init>
    while (1) 
    {
		
		DigReading=ADC_Convert(0);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Convert>
		AnalogValue=((u32)DigReading*5000)/1024;
 4bc:	9c 01       	movw	r18, r24
 4be:	a8 e8       	ldi	r26, 0x88	; 136
 4c0:	b3 e1       	ldi	r27, 0x13	; 19
 4c2:	0e 94 89 02 	call	0x512	; 0x512 <__umulhisi3>
 4c6:	9b 01       	movw	r18, r22
 4c8:	ac 01       	movw	r20, r24
 4ca:	01 2e       	mov	r0, r17
 4cc:	1a e0       	ldi	r17, 0x0A	; 10
 4ce:	56 95       	lsr	r21
 4d0:	47 95       	ror	r20
 4d2:	37 95       	ror	r19
 4d4:	27 95       	ror	r18
 4d6:	1a 95       	dec	r17
 4d8:	d1 f7       	brne	.-12     	; 0x4ce <main+0x3a>
 4da:	10 2d       	mov	r17, r0
		TempValue=AnalogValue/10;
 4dc:	ad ec       	ldi	r26, 0xCD	; 205
 4de:	bc ec       	ldi	r27, 0xCC	; 204
 4e0:	0e 94 89 02 	call	0x512	; 0x512 <__umulhisi3>
 4e4:	ec 01       	movw	r28, r24
 4e6:	d6 95       	lsr	r29
 4e8:	c7 95       	ror	r28
 4ea:	d6 95       	lsr	r29
 4ec:	c7 95       	ror	r28
 4ee:	d6 95       	lsr	r29
 4f0:	c7 95       	ror	r28
		CLCD_SetPosition(0,0);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <CLCD_SetPosition>
		CLCD_SendString("Temp is: ");
 4fa:	80 e6       	ldi	r24, 0x60	; 96
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CLCD_SendString>
		CLCD_SetPosition(1,0);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 e6 00 	call	0x1cc	; 0x1cc <CLCD_SetPosition>
	    CLCD_SendNumber(TempValue);
 50a:	8c 2f       	mov	r24, r28
 50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <CLCD_SendNumber>
 510:	d2 cf       	rjmp	.-92     	; 0x4b6 <main+0x22>

00000512 <__umulhisi3>:
 512:	a2 9f       	mul	r26, r18
 514:	b0 01       	movw	r22, r0
 516:	b3 9f       	mul	r27, r19
 518:	c0 01       	movw	r24, r0
 51a:	a3 9f       	mul	r26, r19
 51c:	70 0d       	add	r23, r0
 51e:	81 1d       	adc	r24, r1
 520:	11 24       	eor	r1, r1
 522:	91 1d       	adc	r25, r1
 524:	b2 9f       	mul	r27, r18
 526:	70 0d       	add	r23, r0
 528:	81 1d       	adc	r24, r1
 52a:	11 24       	eor	r1, r1
 52c:	91 1d       	adc	r25, r1
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
