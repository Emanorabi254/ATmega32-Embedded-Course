
Global_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000520  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d5b  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084e  00000000  00000000  0000145b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fc  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008de  00000000  00000000  00002bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000034dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_1>
   8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_2>
   c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  74:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:

/* Function definitions that deals with pins */

void DIO_SetPinDirection(u8 PortName,u8 PinNumber,u8 PinDirection)
{
	if(PinDirection==PIN_OUTPUT)
  7c:	41 30       	cpi	r20, 0x01	; 1
  7e:	b9 f5       	brne	.+110    	; 0xee <DIO_SetPinDirection+0x72>
	{
		switch(PortName)
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	a1 f0       	breq	.+40     	; 0xac <DIO_SetPinDirection+0x30>
  84:	18 f4       	brcc	.+6      	; 0x8c <DIO_SetPinDirection+0x10>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	31 f0       	breq	.+12     	; 0x96 <DIO_SetPinDirection+0x1a>
  8a:	08 95       	ret
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPinDirection+0x46>
  90:	84 30       	cpi	r24, 0x04	; 4
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPinDirection+0x5c>
  94:	08 95       	ret
		{	case PORT_A: SET_BIT(DDRA,PinNumber);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_SetPinDirection+0x24>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_SetPinDirection+0x20>
  a4:	9a b3       	in	r25, 0x1a	; 26
  a6:	89 2b       	or	r24, r25
  a8:	8a bb       	out	0x1a, r24	; 26
			break;
  aa:	08 95       	ret
			case PORT_B: SET_BIT(DDRB,PinNumber);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_SetPinDirection+0x3a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_SetPinDirection+0x36>
  ba:	97 b3       	in	r25, 0x17	; 23
  bc:	89 2b       	or	r24, r25
  be:	87 bb       	out	0x17, r24	; 23
			break;
  c0:	08 95       	ret
			case PORT_C: SET_BIT(DDRC,PinNumber);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_SetPinDirection+0x50>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_SetPinDirection+0x4c>
  d0:	94 b3       	in	r25, 0x14	; 20
  d2:	89 2b       	or	r24, r25
  d4:	84 bb       	out	0x14, r24	; 20
			break;
  d6:	08 95       	ret
			case PORT_D: SET_BIT(DDRD,PinNumber);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_SetPinDirection+0x66>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_SetPinDirection+0x62>
  e6:	91 b3       	in	r25, 0x11	; 17
  e8:	89 2b       	or	r24, r25
  ea:	81 bb       	out	0x11, r24	; 17
			break;
  ec:	08 95       	ret
		}
	}
	else if(PinDirection==PIN_INPUT)
  ee:	41 11       	cpse	r20, r1
  f0:	3a c0       	rjmp	.+116    	; 0x166 <DIO_SetPinDirection+0xea>
	{
		switch(PortName)
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	a9 f0       	breq	.+42     	; 0x120 <DIO_SetPinDirection+0xa4>
  f6:	18 f4       	brcc	.+6      	; 0xfe <DIO_SetPinDirection+0x82>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	31 f0       	breq	.+12     	; 0x108 <DIO_SetPinDirection+0x8c>
  fc:	08 95       	ret
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	d9 f0       	breq	.+54     	; 0x138 <DIO_SetPinDirection+0xbc>
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	29 f1       	breq	.+74     	; 0x150 <DIO_SetPinDirection+0xd4>
 106:	08 95       	ret
		{	case PORT_A: CLR_BIT(DDRA,PinNumber);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDirection+0x96>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDirection+0x92>
 116:	80 95       	com	r24
 118:	9a b3       	in	r25, 0x1a	; 26
 11a:	89 23       	and	r24, r25
 11c:	8a bb       	out	0x1a, r24	; 26
			break;
 11e:	08 95       	ret
			case PORT_B: CLR_BIT(DDRB,PinNumber);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0xae>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0xaa>
 12e:	80 95       	com	r24
 130:	97 b3       	in	r25, 0x17	; 23
 132:	89 23       	and	r24, r25
 134:	87 bb       	out	0x17, r24	; 23
			break;
 136:	08 95       	ret
			case PORT_C: CLR_BIT(DDRC,PinNumber);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDirection+0xc6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDirection+0xc2>
 146:	80 95       	com	r24
 148:	94 b3       	in	r25, 0x14	; 20
 14a:	89 23       	and	r24, r25
 14c:	84 bb       	out	0x14, r24	; 20
			break;
 14e:	08 95       	ret
			case PORT_D: CLR_BIT(DDRD,PinNumber);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDirection+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDirection+0xda>
 15e:	80 95       	com	r24
 160:	91 b3       	in	r25, 0x11	; 17
 162:	89 23       	and	r24, r25
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(u8 PortName,u8 PinNumber,u8 PinValue)
{
		if(PinValue==PIN_HIGH)
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	b9 f5       	brne	.+110    	; 0x1da <DIO_SetPinValue+0x72>
		{
			switch(PortName)
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	a1 f0       	breq	.+40     	; 0x198 <DIO_SetPinValue+0x30>
 170:	18 f4       	brcc	.+6      	; 0x178 <DIO_SetPinValue+0x10>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	31 f0       	breq	.+12     	; 0x182 <DIO_SetPinValue+0x1a>
 176:	08 95       	ret
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	c9 f0       	breq	.+50     	; 0x1ae <DIO_SetPinValue+0x46>
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	11 f1       	breq	.+68     	; 0x1c4 <DIO_SetPinValue+0x5c>
 180:	08 95       	ret
			{	case PORT_A: SET_BIT(PORTA,PinNumber);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinValue+0x24>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinValue+0x20>
 190:	9b b3       	in	r25, 0x1b	; 27
 192:	89 2b       	or	r24, r25
 194:	8b bb       	out	0x1b, r24	; 27
				break;
 196:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,PinNumber);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinValue+0x3a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinValue+0x36>
 1a6:	98 b3       	in	r25, 0x18	; 24
 1a8:	89 2b       	or	r24, r25
 1aa:	88 bb       	out	0x18, r24	; 24
				break;
 1ac:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,PinNumber);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_SetPinValue+0x50>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_SetPinValue+0x4c>
 1bc:	95 b3       	in	r25, 0x15	; 21
 1be:	89 2b       	or	r24, r25
 1c0:	85 bb       	out	0x15, r24	; 21
				break;
 1c2:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,PinNumber);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_SetPinValue+0x66>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_SetPinValue+0x62>
 1d2:	92 b3       	in	r25, 0x12	; 18
 1d4:	89 2b       	or	r24, r25
 1d6:	82 bb       	out	0x12, r24	; 18
				break;
 1d8:	08 95       	ret
			}
		}
		else if(PinValue==PIN_LOW)
 1da:	41 11       	cpse	r20, r1
 1dc:	3a c0       	rjmp	.+116    	; 0x252 <DIO_SetPinValue+0xea>
		{
			switch(PortName)
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	a9 f0       	breq	.+42     	; 0x20c <DIO_SetPinValue+0xa4>
 1e2:	18 f4       	brcc	.+6      	; 0x1ea <DIO_SetPinValue+0x82>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <DIO_SetPinValue+0x8c>
 1e8:	08 95       	ret
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	d9 f0       	breq	.+54     	; 0x224 <DIO_SetPinValue+0xbc>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	29 f1       	breq	.+74     	; 0x23c <DIO_SetPinValue+0xd4>
 1f2:	08 95       	ret
			{	case PORT_A: CLR_BIT(PORTA,PinNumber);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinValue+0x96>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinValue+0x92>
 202:	80 95       	com	r24
 204:	9b b3       	in	r25, 0x1b	; 27
 206:	89 23       	and	r24, r25
 208:	8b bb       	out	0x1b, r24	; 27
				break;
 20a:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,PinNumber);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinValue+0xae>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinValue+0xaa>
 21a:	80 95       	com	r24
 21c:	98 b3       	in	r25, 0x18	; 24
 21e:	89 23       	and	r24, r25
 220:	88 bb       	out	0x18, r24	; 24
				break;
 222:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,PinNumber);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinValue+0xc6>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinValue+0xc2>
 232:	80 95       	com	r24
 234:	95 b3       	in	r25, 0x15	; 21
 236:	89 23       	and	r24, r25
 238:	85 bb       	out	0x15, r24	; 21
				break;
 23a:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,PinNumber);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinValue+0xde>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinValue+0xda>
 24a:	80 95       	com	r24
 24c:	92 b3       	in	r25, 0x12	; 18
 24e:	89 23       	and	r24, r25
 250:	82 bb       	out	0x12, r24	; 18
 252:	08 95       	ret

00000254 <EXTI_EnabledOrDisable>:
void (*GlobalPtr2)(void)=NULL;


void EXTI_EnabledOrDisable(u8 IntIdx,u8 IntState)
{
	switch(IntState)
 254:	66 23       	and	r22, r22
 256:	a1 f0       	breq	.+40     	; 0x280 <EXTI_EnabledOrDisable+0x2c>
 258:	61 30       	cpi	r22, 0x01	; 1
 25a:	19 f5       	brne	.+70     	; 0x2a2 <EXTI_EnabledOrDisable+0x4e>
	{
		case ENABLED:
		switch(IntIdx)
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	41 f0       	breq	.+16     	; 0x270 <EXTI_EnabledOrDisable+0x1c>
 260:	18 f0       	brcs	.+6      	; 0x268 <EXTI_EnabledOrDisable+0x14>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	49 f0       	breq	.+18     	; 0x278 <EXTI_EnabledOrDisable+0x24>
 266:	08 95       	ret
		{
			case INT0:
			SET_BIT(GICR,GICR_INT0);
 268:	8b b7       	in	r24, 0x3b	; 59
 26a:	80 64       	ori	r24, 0x40	; 64
 26c:	8b bf       	out	0x3b, r24	; 59
			break;
 26e:	08 95       	ret
			case INT1:
			SET_BIT(GICR,GICR_INT1);
 270:	8b b7       	in	r24, 0x3b	; 59
 272:	80 68       	ori	r24, 0x80	; 128
 274:	8b bf       	out	0x3b, r24	; 59
			break;
 276:	08 95       	ret
			case INT2:
			SET_BIT(GICR,GICR_INT2);
 278:	8b b7       	in	r24, 0x3b	; 59
 27a:	80 62       	ori	r24, 0x20	; 32
 27c:	8b bf       	out	0x3b, r24	; 59
			break;
 27e:	08 95       	ret
		}
		break;
		
		case DISABLED:
		switch(IntIdx)
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	41 f0       	breq	.+16     	; 0x294 <EXTI_EnabledOrDisable+0x40>
 284:	18 f0       	brcs	.+6      	; 0x28c <EXTI_EnabledOrDisable+0x38>
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	49 f0       	breq	.+18     	; 0x29c <EXTI_EnabledOrDisable+0x48>
 28a:	08 95       	ret
		{
			case INT0:
			CLR_BIT(GICR,GICR_INT0);
 28c:	8b b7       	in	r24, 0x3b	; 59
 28e:	8f 7b       	andi	r24, 0xBF	; 191
 290:	8b bf       	out	0x3b, r24	; 59
			break;
 292:	08 95       	ret
			case INT1:
			CLR_BIT(GICR,GICR_INT1);
 294:	8b b7       	in	r24, 0x3b	; 59
 296:	8f 77       	andi	r24, 0x7F	; 127
 298:	8b bf       	out	0x3b, r24	; 59
			break;
 29a:	08 95       	ret
			case INT2:
			CLR_BIT(GICR,GICR_INT2);
 29c:	8b b7       	in	r24, 0x3b	; 59
 29e:	8f 7d       	andi	r24, 0xDF	; 223
 2a0:	8b bf       	out	0x3b, r24	; 59
 2a2:	08 95       	ret

000002a4 <EXTI_SetSenseCtrl>:
		break;
	}
}
void EXTI_SetSenseCtrl(u8 IntIdx, u8 IntSense)
{
	switch(IntIdx)
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	49 f1       	breq	.+82     	; 0x2fa <EXTI_SetSenseCtrl+0x56>
 2a8:	20 f0       	brcs	.+8      	; 0x2b2 <EXTI_SetSenseCtrl+0xe>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <EXTI_SetSenseCtrl+0xc>
 2ae:	49 c0       	rjmp	.+146    	; 0x342 <EXTI_SetSenseCtrl+0x9e>
 2b0:	08 95       	ret
	{
		case INT0:
		switch(IntSense)
 2b2:	61 30       	cpi	r22, 0x01	; 1
 2b4:	69 f0       	breq	.+26     	; 0x2d0 <EXTI_SetSenseCtrl+0x2c>
 2b6:	28 f0       	brcs	.+10     	; 0x2c2 <EXTI_SetSenseCtrl+0x1e>
 2b8:	62 30       	cpi	r22, 0x02	; 2
 2ba:	89 f0       	breq	.+34     	; 0x2de <EXTI_SetSenseCtrl+0x3a>
 2bc:	63 30       	cpi	r22, 0x03	; 3
 2be:	b1 f0       	breq	.+44     	; 0x2ec <EXTI_SetSenseCtrl+0x48>
 2c0:	08 95       	ret
		{
			case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
 2c2:	85 b7       	in	r24, 0x35	; 53
 2c4:	8e 7f       	andi	r24, 0xFE	; 254
 2c6:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC10);	
 2c8:	85 b7       	in	r24, 0x35	; 53
 2ca:	84 60       	ori	r24, 0x04	; 4
 2cc:	85 bf       	out	0x35, r24	; 53
			break;
 2ce:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
 2d0:	85 b7       	in	r24, 0x35	; 53
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC10);
 2d6:	85 b7       	in	r24, 0x35	; 53
 2d8:	84 60       	ori	r24, 0x04	; 4
 2da:	85 bf       	out	0x35, r24	; 53
			break;
 2dc:	08 95       	ret
			case LOGICAL_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
 2de:	85 b7       	in	r24, 0x35	; 53
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,MCUCR_ISC10);
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	85 bf       	out	0x35, r24	; 53
			break;
 2ea:	08 95       	ret
			case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
 2ec:	85 b7       	in	r24, 0x35	; 53
 2ee:	8e 7f       	andi	r24, 0xFE	; 254
 2f0:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,MCUCR_ISC10);
 2f2:	85 b7       	in	r24, 0x35	; 53
 2f4:	8b 7f       	andi	r24, 0xFB	; 251
 2f6:	85 bf       	out	0x35, r24	; 53
			break;
 2f8:	08 95       	ret
		}
		break;
		case INT1:
		switch(IntSense)
 2fa:	61 30       	cpi	r22, 0x01	; 1
 2fc:	69 f0       	breq	.+26     	; 0x318 <EXTI_SetSenseCtrl+0x74>
 2fe:	28 f0       	brcs	.+10     	; 0x30a <EXTI_SetSenseCtrl+0x66>
 300:	62 30       	cpi	r22, 0x02	; 2
 302:	89 f0       	breq	.+34     	; 0x326 <EXTI_SetSenseCtrl+0x82>
 304:	63 30       	cpi	r22, 0x03	; 3
 306:	b1 f0       	breq	.+44     	; 0x334 <EXTI_SetSenseCtrl+0x90>
 308:	08 95       	ret
		{
			case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
 30a:	85 b7       	in	r24, 0x35	; 53
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC11);
 310:	85 b7       	in	r24, 0x35	; 53
 312:	88 60       	ori	r24, 0x08	; 8
 314:	85 bf       	out	0x35, r24	; 53
			break;
 316:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
 318:	85 b7       	in	r24, 0x35	; 53
 31a:	84 60       	ori	r24, 0x04	; 4
 31c:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC11);
 31e:	85 b7       	in	r24, 0x35	; 53
 320:	88 60       	ori	r24, 0x08	; 8
 322:	85 bf       	out	0x35, r24	; 53
			break;
 324:	08 95       	ret
			case LOGICAL_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
 326:	85 b7       	in	r24, 0x35	; 53
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,MCUCR_ISC11);
 32c:	85 b7       	in	r24, 0x35	; 53
 32e:	87 7f       	andi	r24, 0xF7	; 247
 330:	85 bf       	out	0x35, r24	; 53
			break;
 332:	08 95       	ret
			case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
 334:	85 b7       	in	r24, 0x35	; 53
 336:	8b 7f       	andi	r24, 0xFB	; 251
 338:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,MCUCR_ISC11);
 33a:	85 b7       	in	r24, 0x35	; 53
 33c:	87 7f       	andi	r24, 0xF7	; 247
 33e:	85 bf       	out	0x35, r24	; 53
			break;
 340:	08 95       	ret
		}
		break;
		case INT2:
		switch(IntSense)
 342:	66 23       	and	r22, r22
 344:	19 f0       	breq	.+6      	; 0x34c <EXTI_SetSenseCtrl+0xa8>
 346:	61 30       	cpi	r22, 0x01	; 1
 348:	29 f0       	breq	.+10     	; 0x354 <EXTI_SetSenseCtrl+0xb0>
 34a:	08 95       	ret
		{
			case FALLING_EDGE:
			CLR_BIT(MCUSR,MCUSR_ISC2);
 34c:	84 b7       	in	r24, 0x34	; 52
 34e:	8f 7b       	andi	r24, 0xBF	; 191
 350:	84 bf       	out	0x34, r24	; 52
			break;
 352:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUSR,MCUSR_ISC2);
 354:	84 b7       	in	r24, 0x34	; 52
 356:	80 64       	ori	r24, 0x40	; 64
 358:	84 bf       	out	0x34, r24	; 52
 35a:	08 95       	ret

0000035c <EXTI_SetCallBack>:
}

u8 EXTI_SetCallBack(u8 IntIdx,void(*PtrFunc)(void))  // Here The Pointer is a local pointer to function as we need the address of the function that will be written in the main.c
{
	u8 ErrorState=OK;
	if(PtrFunc !=NULL)
 35c:	61 15       	cp	r22, r1
 35e:	71 05       	cpc	r23, r1
 360:	c1 f0       	breq	.+48     	; 0x392 <EXTI_SetCallBack+0x36>
	{
		switch(IntIdx)
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	51 f0       	breq	.+20     	; 0x37a <EXTI_SetCallBack+0x1e>
 366:	18 f0       	brcs	.+6      	; 0x36e <EXTI_SetCallBack+0x12>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	69 f0       	breq	.+26     	; 0x386 <EXTI_SetCallBack+0x2a>
 36c:	14 c0       	rjmp	.+40     	; 0x396 <EXTI_SetCallBack+0x3a>
		{
			case INT0:
			GlobalPtr0=PtrFunc;   // here we move the local pointer to the global pointer 
 36e:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <GlobalPtr0+0x1>
 372:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <GlobalPtr0>
	}
}

u8 EXTI_SetCallBack(u8 IntIdx,void(*PtrFunc)(void))  // Here The Pointer is a local pointer to function as we need the address of the function that will be written in the main.c
{
	u8 ErrorState=OK;
 376:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(IntIdx)
		{
			case INT0:
			GlobalPtr0=PtrFunc;   // here we move the local pointer to the global pointer 
			break;
 378:	08 95       	ret
			case INT1:
			GlobalPtr1=PtrFunc;
 37a:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <GlobalPtr1+0x1>
 37e:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <GlobalPtr1>
	}
}

u8 EXTI_SetCallBack(u8 IntIdx,void(*PtrFunc)(void))  // Here The Pointer is a local pointer to function as we need the address of the function that will be written in the main.c
{
	u8 ErrorState=OK;
 382:	81 e0       	ldi	r24, 0x01	; 1
			case INT0:
			GlobalPtr0=PtrFunc;   // here we move the local pointer to the global pointer 
			break;
			case INT1:
			GlobalPtr1=PtrFunc;
			break;
 384:	08 95       	ret
			case INT2:
			GlobalPtr2=PtrFunc;
 386:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 38a:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}

u8 EXTI_SetCallBack(u8 IntIdx,void(*PtrFunc)(void))  // Here The Pointer is a local pointer to function as we need the address of the function that will be written in the main.c
{
	u8 ErrorState=OK;
 38e:	81 e0       	ldi	r24, 0x01	; 1
			case INT1:
			GlobalPtr1=PtrFunc;
			break;
			case INT2:
			GlobalPtr2=PtrFunc;
			break;
 390:	08 95       	ret
		}
	}
	else
	{
		ErrorState=NOK;	
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	08 95       	ret
	}
}

u8 EXTI_SetCallBack(u8 IntIdx,void(*PtrFunc)(void))  // Here The Pointer is a local pointer to function as we need the address of the function that will be written in the main.c
{
	u8 ErrorState=OK;
 396:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		ErrorState=NOK;	
	}
	return ErrorState;
}
 398:	08 95       	ret

0000039a <__vector_1>:

void __vector_1(void) __attribute__((signal));

void __vector_1(void)
{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
	GlobalPtr0();
 3bc:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GlobalPtr0>
 3c0:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GlobalPtr0+0x1>
 3c4:	09 95       	icall
}
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_2>:


void __vector_2(void) __attribute__((signal));

void __vector_2(void)
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	2f 93       	push	r18
 3f4:	3f 93       	push	r19
 3f6:	4f 93       	push	r20
 3f8:	5f 93       	push	r21
 3fa:	6f 93       	push	r22
 3fc:	7f 93       	push	r23
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	af 93       	push	r26
 404:	bf 93       	push	r27
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
	GlobalPtr1();
 40a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <GlobalPtr1>
 40e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <GlobalPtr1+0x1>
 412:	09 95       	icall
}
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <__vector_3>:


void __vector_3(void) __attribute__((signal));

void __vector_3(void)
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	2f 93       	push	r18
 442:	3f 93       	push	r19
 444:	4f 93       	push	r20
 446:	5f 93       	push	r21
 448:	6f 93       	push	r22
 44a:	7f 93       	push	r23
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
 450:	af 93       	push	r26
 452:	bf 93       	push	r27
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31
	GlobalPtr2();
 458:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 45c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 460:	09 95       	icall
 462:	ff 91       	pop	r31
 464:	ef 91       	pop	r30
 466:	bf 91       	pop	r27
 468:	af 91       	pop	r26
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	7f 91       	pop	r23
 470:	6f 91       	pop	r22
 472:	5f 91       	pop	r21
 474:	4f 91       	pop	r20
 476:	3f 91       	pop	r19
 478:	2f 91       	pop	r18
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <GI_EnabledOrDisabled>:
#include "GI_Interface.h"
#include "GI_Private.h"

void GI_EnabledOrDisabled(u8 GI_State)
{
	switch(GI_State)
 484:	88 23       	and	r24, r24
 486:	31 f0       	breq	.+12     	; 0x494 <GI_EnabledOrDisabled+0x10>
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	39 f4       	brne	.+14     	; 0x49a <GI_EnabledOrDisabled+0x16>
	{
		case ENABLED:
		SET_BIT(SREG,SREG_I);
 48c:	8f b7       	in	r24, 0x3f	; 63
 48e:	80 68       	ori	r24, 0x80	; 128
 490:	8f bf       	out	0x3f, r24	; 63
		break;
 492:	08 95       	ret
		
		case DISABLED:
		CLR_BIT(SREG,SREG_I);
 494:	8f b7       	in	r24, 0x3f	; 63
 496:	8f 77       	andi	r24, 0x7F	; 127
 498:	8f bf       	out	0x3f, r24	; 63
 49a:	08 95       	ret

0000049c <LED_Init>:
	{
		case LED_ON:
		DIO_SetPinValue(PortLed,PinLed,PIN_HIGH);
		break;
		case LED_OFF:
		DIO_SetPinValue(PortLed,PinLed,PIN_LOW);
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 4a2:	08 95       	ret

000004a4 <LED_Toggle>:
		break;
	}
}
void LED_Toggle(u8 PortLed,u8 PinLed)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	c8 2f       	mov	r28, r24
 4aa:	d6 2f       	mov	r29, r22
	DIO_SetPinValue(PortLed,PinLed,PIN_HIGH);
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	2f e7       	ldi	r18, 0x7F	; 127
 4b4:	8a e1       	ldi	r24, 0x1A	; 26
 4b6:	96 e0       	ldi	r25, 0x06	; 6
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	90 40       	sbci	r25, 0x00	; 0
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <LED_Toggle+0x14>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <LED_Toggle+0x1e>
 4c2:	00 00       	nop
	_delay_ms(2000);
	DIO_SetPinValue(PortLed,PinLed,PIN_LOW);
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	6d 2f       	mov	r22, r29
 4c8:	8c 2f       	mov	r24, r28
 4ca:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_SetPinValue>
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <Func>:


/* ISR By Using The Callback  */
void Func(void)
{
	LED_Toggle(PORT_A,PIN0);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_Toggle>
 4dc:	08 95       	ret

000004de <main>:
#include "EXTI_Interface.h"

void Func();
int main(void)
{
	DIO_SetPinDirection(PORT_B,PIN2,PIN_INPUT);
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	62 e0       	ldi	r22, 0x02	; 2
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinValue(PORT_B,PIN2,PIN_HIGH);
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	62 e0       	ldi	r22, 0x02	; 2
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_SetPinValue>
	LED_Init(PORT_A,PIN0);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	0e 94 4e 02 	call	0x49c	; 0x49c <LED_Init>
	GI_EnabledOrDisabled(ENABLED);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 42 02 	call	0x484	; 0x484 <GI_EnabledOrDisabled>
	EXTI_EnabledOrDisable(INT2,ENABLED);
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 2a 01 	call	0x254	; 0x254 <EXTI_EnabledOrDisable>
	EXTI_SetSenseCtrl(INT2,FALLING_EDGE);
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <EXTI_SetSenseCtrl>
	EXTI_SetCallBack(INT2,Func);
 510:	6a e6       	ldi	r22, 0x6A	; 106
 512:	72 e0       	ldi	r23, 0x02	; 2
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 ae 01 	call	0x35c	; 0x35c <EXTI_SetCallBack>
 51a:	ff cf       	rjmp	.-2      	; 0x51a <main+0x3c>

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
