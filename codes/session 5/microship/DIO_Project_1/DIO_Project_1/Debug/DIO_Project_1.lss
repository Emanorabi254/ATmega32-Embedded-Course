
DIO_Project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000869  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000668  00000000  00000000  00000c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046d  00000000  00000000  0000127d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 22 01 	call	0x244	; 0x244 <main>
  64:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:

/* Function definitions that deals with pins */

void DIO_SetPinDirection(u8 PortName,u8 PinNumber,u8 PinDirection)
{
	if(PinDirection==PIN_OUTPUT)
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	b9 f5       	brne	.+110    	; 0xde <DIO_SetPinDirection+0x72>
	{
		switch(PortName)
  70:	82 30       	cpi	r24, 0x02	; 2
  72:	a1 f0       	breq	.+40     	; 0x9c <DIO_SetPinDirection+0x30>
  74:	18 f4       	brcc	.+6      	; 0x7c <DIO_SetPinDirection+0x10>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	31 f0       	breq	.+12     	; 0x86 <DIO_SetPinDirection+0x1a>
  7a:	08 95       	ret
  7c:	83 30       	cpi	r24, 0x03	; 3
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPinDirection+0x46>
  80:	84 30       	cpi	r24, 0x04	; 4
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPinDirection+0x5c>
  84:	08 95       	ret
		{	case PORT_A: SET_BIT(DDRA,PinNumber);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <DIO_SetPinDirection+0x24>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	6a 95       	dec	r22
  92:	e2 f7       	brpl	.-8      	; 0x8c <DIO_SetPinDirection+0x20>
  94:	9a b3       	in	r25, 0x1a	; 26
  96:	89 2b       	or	r24, r25
  98:	8a bb       	out	0x1a, r24	; 26
			break;
  9a:	08 95       	ret
			case PORT_B: SET_BIT(DDRB,PinNumber);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_SetPinDirection+0x3a>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_SetPinDirection+0x36>
  aa:	97 b3       	in	r25, 0x17	; 23
  ac:	89 2b       	or	r24, r25
  ae:	87 bb       	out	0x17, r24	; 23
			break;
  b0:	08 95       	ret
			case PORT_C: SET_BIT(DDRC,PinNumber);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <DIO_SetPinDirection+0x50>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <DIO_SetPinDirection+0x4c>
  c0:	94 b3       	in	r25, 0x14	; 20
  c2:	89 2b       	or	r24, r25
  c4:	84 bb       	out	0x14, r24	; 20
			break;
  c6:	08 95       	ret
			case PORT_D: SET_BIT(DDRD,PinNumber);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPinDirection+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPinDirection+0x62>
  d6:	91 b3       	in	r25, 0x11	; 17
  d8:	89 2b       	or	r24, r25
  da:	81 bb       	out	0x11, r24	; 17
			break;
  dc:	08 95       	ret
		}
	}
	else if(PinDirection==PIN_INPUT)
  de:	41 11       	cpse	r20, r1
  e0:	3a c0       	rjmp	.+116    	; 0x156 <DIO_SetPinDirection+0xea>
	{
		switch(PortName)
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	a9 f0       	breq	.+42     	; 0x110 <DIO_SetPinDirection+0xa4>
  e6:	18 f4       	brcc	.+6      	; 0xee <DIO_SetPinDirection+0x82>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	31 f0       	breq	.+12     	; 0xf8 <DIO_SetPinDirection+0x8c>
  ec:	08 95       	ret
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	d9 f0       	breq	.+54     	; 0x128 <DIO_SetPinDirection+0xbc>
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	29 f1       	breq	.+74     	; 0x140 <DIO_SetPinDirection+0xd4>
  f6:	08 95       	ret
		{	case PORT_A: CLR_BIT(DDRA,PinNumber);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPinDirection+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPinDirection+0x92>
 106:	80 95       	com	r24
 108:	9a b3       	in	r25, 0x1a	; 26
 10a:	89 23       	and	r24, r25
 10c:	8a bb       	out	0x1a, r24	; 26
			break;
 10e:	08 95       	ret
			case PORT_B: CLR_BIT(DDRB,PinNumber);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_SetPinDirection+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_SetPinDirection+0xaa>
 11e:	80 95       	com	r24
 120:	97 b3       	in	r25, 0x17	; 23
 122:	89 23       	and	r24, r25
 124:	87 bb       	out	0x17, r24	; 23
			break;
 126:	08 95       	ret
			case PORT_C: CLR_BIT(DDRC,PinNumber);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SetPinDirection+0xc6>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SetPinDirection+0xc2>
 136:	80 95       	com	r24
 138:	94 b3       	in	r25, 0x14	; 20
 13a:	89 23       	and	r24, r25
 13c:	84 bb       	out	0x14, r24	; 20
			break;
 13e:	08 95       	ret
			case PORT_D: CLR_BIT(DDRD,PinNumber);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	91 b3       	in	r25, 0x11	; 17
 152:	89 23       	and	r24, r25
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(u8 PortName,u8 PinNumber,u8 PinValue)
{
		if(PinValue==PIN_HIGH)
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	b9 f5       	brne	.+110    	; 0x1ca <DIO_SetPinValue+0x72>
		{
			switch(PortName)
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	a1 f0       	breq	.+40     	; 0x188 <DIO_SetPinValue+0x30>
 160:	18 f4       	brcc	.+6      	; 0x168 <DIO_SetPinValue+0x10>
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	31 f0       	breq	.+12     	; 0x172 <DIO_SetPinValue+0x1a>
 166:	08 95       	ret
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	c9 f0       	breq	.+50     	; 0x19e <DIO_SetPinValue+0x46>
 16c:	84 30       	cpi	r24, 0x04	; 4
 16e:	11 f1       	breq	.+68     	; 0x1b4 <DIO_SetPinValue+0x5c>
 170:	08 95       	ret
			{	case PORT_A: SET_BIT(PORTA,PinNumber);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinValue+0x24>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinValue+0x20>
 180:	9b b3       	in	r25, 0x1b	; 27
 182:	89 2b       	or	r24, r25
 184:	8b bb       	out	0x1b, r24	; 27
				break;
 186:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,PinNumber);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPinValue+0x3a>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPinValue+0x36>
 196:	98 b3       	in	r25, 0x18	; 24
 198:	89 2b       	or	r24, r25
 19a:	88 bb       	out	0x18, r24	; 24
				break;
 19c:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,PinNumber);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPinValue+0x50>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_SetPinValue+0x4c>
 1ac:	95 b3       	in	r25, 0x15	; 21
 1ae:	89 2b       	or	r24, r25
 1b0:	85 bb       	out	0x15, r24	; 21
				break;
 1b2:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,PinNumber);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinValue+0x62>
 1c2:	92 b3       	in	r25, 0x12	; 18
 1c4:	89 2b       	or	r24, r25
 1c6:	82 bb       	out	0x12, r24	; 18
				break;
 1c8:	08 95       	ret
			}
		}
		else if(PinValue==PIN_LOW)
 1ca:	41 11       	cpse	r20, r1
 1cc:	3a c0       	rjmp	.+116    	; 0x242 <DIO_SetPinValue+0xea>
		{
			switch(PortName)
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	a9 f0       	breq	.+42     	; 0x1fc <DIO_SetPinValue+0xa4>
 1d2:	18 f4       	brcc	.+6      	; 0x1da <DIO_SetPinValue+0x82>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <DIO_SetPinValue+0x8c>
 1d8:	08 95       	ret
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	d9 f0       	breq	.+54     	; 0x214 <DIO_SetPinValue+0xbc>
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	29 f1       	breq	.+74     	; 0x22c <DIO_SetPinValue+0xd4>
 1e2:	08 95       	ret
			{	case PORT_A: CLR_BIT(PORTA,PinNumber);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_SetPinValue+0x96>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_SetPinValue+0x92>
 1f2:	80 95       	com	r24
 1f4:	9b b3       	in	r25, 0x1b	; 27
 1f6:	89 23       	and	r24, r25
 1f8:	8b bb       	out	0x1b, r24	; 27
				break;
 1fa:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,PinNumber);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPinValue+0xae>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPinValue+0xaa>
 20a:	80 95       	com	r24
 20c:	98 b3       	in	r25, 0x18	; 24
 20e:	89 23       	and	r24, r25
 210:	88 bb       	out	0x18, r24	; 24
				break;
 212:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,PinNumber);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_SetPinValue+0xc6>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_SetPinValue+0xc2>
 222:	80 95       	com	r24
 224:	95 b3       	in	r25, 0x15	; 21
 226:	89 23       	and	r24, r25
 228:	85 bb       	out	0x15, r24	; 21
				break;
 22a:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,PinNumber);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPinValue+0xde>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPinValue+0xda>
 23a:	80 95       	com	r24
 23c:	92 b3       	in	r25, 0x12	; 18
 23e:	89 23       	and	r24, r25
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <main>:
#include "DIO_Interface.h"

int main(void)
{
	// Make Pina0 ---> output
DIO_SetPinDirection(PORT_A,PIN0,PIN_OUTPUT);
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	//send High on it
    while (1) 
    {
		DIO_SetPinValue(PORT_A,PIN0,PIN_HIGH);
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	2f e3       	ldi	r18, 0x3F	; 63
 25a:	8d e0       	ldi	r24, 0x0D	; 13
 25c:	93 e0       	ldi	r25, 0x03	; 3
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x1a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x24>
 268:	00 00       	nop
		_delay_ms(1000);
		DIO_SetPinValue(PORT_A,PIN0,PIN_LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
 274:	2f e3       	ldi	r18, 0x3F	; 63
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	93 e0       	ldi	r25, 0x03	; 3
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x36>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x40>
 284:	00 00       	nop
 286:	e3 cf       	rjmp	.-58     	; 0x24e <main+0xa>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
