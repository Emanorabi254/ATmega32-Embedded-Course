
DC MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a46  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000544  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d0  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002246  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  64:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DCM_Init>:
#include "DC_MOTOR_Config.h"
#include "DC_MOTOR_interface.h"

void DCM_Init(void)
{
	DIO_SetPinDirection(DCM_PORT,DCM_PIN0,PIN_OUTPUT);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_SetPinDirection>
	DIO_SetPinDirection(DCM_PORT,DCM_PIN1,PIN_OUTPUT);
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_SetPinDirection>
  80:	08 95       	ret

00000082 <DCM_RotateCW>:
}
void DCM_RotateCW(void)
{
	DIO_SetPinValue(DCM_PORT,DCM_PIN0,PIN_LOW);
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_SetPinValue>
	DIO_SetPinValue(DCM_PORT,DCM_PIN1,PIN_HIGH);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_SetPinValue>
  96:	08 95       	ret

00000098 <DCM_RotateCCW>:
}
void DCM_RotateCCW(void)
{
	DIO_SetPinValue(DCM_PORT,DCM_PIN0,PIN_HIGH);
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_SetPinValue>
	DIO_SetPinValue(DCM_PORT,DCM_PIN1,PIN_LOW);
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_SetPinValue>
  ac:	08 95       	ret

000000ae <DCM_Stop>:
}
void DCM_Stop(void)
{
	DIO_SetPinValue(DCM_PORT,DCM_PIN0,PIN_LOW);
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_SetPinValue>
	DIO_SetPinValue(DCM_PORT,DCM_PIN1,PIN_LOW);	
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_SetPinValue>
  c2:	08 95       	ret

000000c4 <DIO_SetPinDirection>:

/* Function definitions that deals with pins */

void DIO_SetPinDirection(u8 PortName,u8 PinNumber,u8 PinDirection)
{
	if(PinDirection==PIN_OUTPUT)
  c4:	41 30       	cpi	r20, 0x01	; 1
  c6:	b9 f5       	brne	.+110    	; 0x136 <DIO_SetPinDirection+0x72>
	{
		switch(PortName)
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	a1 f0       	breq	.+40     	; 0xf4 <DIO_SetPinDirection+0x30>
  cc:	18 f4       	brcc	.+6      	; 0xd4 <DIO_SetPinDirection+0x10>
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	31 f0       	breq	.+12     	; 0xde <DIO_SetPinDirection+0x1a>
  d2:	08 95       	ret
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	c9 f0       	breq	.+50     	; 0x10a <DIO_SetPinDirection+0x46>
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	11 f1       	breq	.+68     	; 0x120 <DIO_SetPinDirection+0x5c>
  dc:	08 95       	ret
		{	case PORT_A: SET_BIT(DDRA,PinNumber);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x24>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x20>
  ec:	9a b3       	in	r25, 0x1a	; 26
  ee:	89 2b       	or	r24, r25
  f0:	8a bb       	out	0x1a, r24	; 26
			break;
  f2:	08 95       	ret
			case PORT_B: SET_BIT(DDRB,PinNumber);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_SetPinDirection+0x3a>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_SetPinDirection+0x36>
 102:	97 b3       	in	r25, 0x17	; 23
 104:	89 2b       	or	r24, r25
 106:	87 bb       	out	0x17, r24	; 23
			break;
 108:	08 95       	ret
			case PORT_C: SET_BIT(DDRC,PinNumber);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0x50>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0x4c>
 118:	94 b3       	in	r25, 0x14	; 20
 11a:	89 2b       	or	r24, r25
 11c:	84 bb       	out	0x14, r24	; 20
			break;
 11e:	08 95       	ret
			case PORT_D: SET_BIT(DDRD,PinNumber);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0x66>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0x62>
 12e:	91 b3       	in	r25, 0x11	; 17
 130:	89 2b       	or	r24, r25
 132:	81 bb       	out	0x11, r24	; 17
			break;
 134:	08 95       	ret
		}
	}
	else if(PinDirection==PIN_INPUT)
 136:	41 11       	cpse	r20, r1
 138:	3a c0       	rjmp	.+116    	; 0x1ae <DIO_SetPinDirection+0xea>
	{
		switch(PortName)
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	a9 f0       	breq	.+42     	; 0x168 <DIO_SetPinDirection+0xa4>
 13e:	18 f4       	brcc	.+6      	; 0x146 <DIO_SetPinDirection+0x82>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	31 f0       	breq	.+12     	; 0x150 <DIO_SetPinDirection+0x8c>
 144:	08 95       	ret
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	d9 f0       	breq	.+54     	; 0x180 <DIO_SetPinDirection+0xbc>
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	29 f1       	breq	.+74     	; 0x198 <DIO_SetPinDirection+0xd4>
 14e:	08 95       	ret
		{	case PORT_A: CLR_BIT(DDRA,PinNumber);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDirection+0x96>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDirection+0x92>
 15e:	80 95       	com	r24
 160:	9a b3       	in	r25, 0x1a	; 26
 162:	89 23       	and	r24, r25
 164:	8a bb       	out	0x1a, r24	; 26
			break;
 166:	08 95       	ret
			case PORT_B: CLR_BIT(DDRB,PinNumber);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDirection+0xae>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDirection+0xaa>
 176:	80 95       	com	r24
 178:	97 b3       	in	r25, 0x17	; 23
 17a:	89 23       	and	r24, r25
 17c:	87 bb       	out	0x17, r24	; 23
			break;
 17e:	08 95       	ret
			case PORT_C: CLR_BIT(DDRC,PinNumber);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDirection+0xc6>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDirection+0xc2>
 18e:	80 95       	com	r24
 190:	94 b3       	in	r25, 0x14	; 20
 192:	89 23       	and	r24, r25
 194:	84 bb       	out	0x14, r24	; 20
			break;
 196:	08 95       	ret
			case PORT_D: CLR_BIT(DDRD,PinNumber);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinDirection+0xde>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinDirection+0xda>
 1a6:	80 95       	com	r24
 1a8:	91 b3       	in	r25, 0x11	; 17
 1aa:	89 23       	and	r24, r25
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	08 95       	ret

000001b0 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(u8 PortName,u8 PinNumber,u8 PinValue)
{
		if(PinValue==PIN_HIGH)
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	b9 f5       	brne	.+110    	; 0x222 <DIO_SetPinValue+0x72>
		{
			switch(PortName)
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	a1 f0       	breq	.+40     	; 0x1e0 <DIO_SetPinValue+0x30>
 1b8:	18 f4       	brcc	.+6      	; 0x1c0 <DIO_SetPinValue+0x10>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	31 f0       	breq	.+12     	; 0x1ca <DIO_SetPinValue+0x1a>
 1be:	08 95       	ret
 1c0:	83 30       	cpi	r24, 0x03	; 3
 1c2:	c9 f0       	breq	.+50     	; 0x1f6 <DIO_SetPinValue+0x46>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	11 f1       	breq	.+68     	; 0x20c <DIO_SetPinValue+0x5c>
 1c8:	08 95       	ret
			{	case PORT_A: SET_BIT(PORTA,PinNumber);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_SetPinValue+0x24>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_SetPinValue+0x20>
 1d8:	9b b3       	in	r25, 0x1b	; 27
 1da:	89 2b       	or	r24, r25
 1dc:	8b bb       	out	0x1b, r24	; 27
				break;
 1de:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,PinNumber);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_SetPinValue+0x3a>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_SetPinValue+0x36>
 1ee:	98 b3       	in	r25, 0x18	; 24
 1f0:	89 2b       	or	r24, r25
 1f2:	88 bb       	out	0x18, r24	; 24
				break;
 1f4:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,PinNumber);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_SetPinValue+0x50>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_SetPinValue+0x4c>
 204:	95 b3       	in	r25, 0x15	; 21
 206:	89 2b       	or	r24, r25
 208:	85 bb       	out	0x15, r24	; 21
				break;
 20a:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,PinNumber);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinValue+0x66>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinValue+0x62>
 21a:	92 b3       	in	r25, 0x12	; 18
 21c:	89 2b       	or	r24, r25
 21e:	82 bb       	out	0x12, r24	; 18
				break;
 220:	08 95       	ret
			}
		}
		else if(PinValue==PIN_LOW)
 222:	41 11       	cpse	r20, r1
 224:	3a c0       	rjmp	.+116    	; 0x29a <DIO_SetPinValue+0xea>
		{
			switch(PortName)
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	a9 f0       	breq	.+42     	; 0x254 <DIO_SetPinValue+0xa4>
 22a:	18 f4       	brcc	.+6      	; 0x232 <DIO_SetPinValue+0x82>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	31 f0       	breq	.+12     	; 0x23c <DIO_SetPinValue+0x8c>
 230:	08 95       	ret
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	d9 f0       	breq	.+54     	; 0x26c <DIO_SetPinValue+0xbc>
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	29 f1       	breq	.+74     	; 0x284 <DIO_SetPinValue+0xd4>
 23a:	08 95       	ret
			{	case PORT_A: CLR_BIT(PORTA,PinNumber);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinValue+0x96>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinValue+0x92>
 24a:	80 95       	com	r24
 24c:	9b b3       	in	r25, 0x1b	; 27
 24e:	89 23       	and	r24, r25
 250:	8b bb       	out	0x1b, r24	; 27
				break;
 252:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,PinNumber);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinValue+0xae>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinValue+0xaa>
 262:	80 95       	com	r24
 264:	98 b3       	in	r25, 0x18	; 24
 266:	89 23       	and	r24, r25
 268:	88 bb       	out	0x18, r24	; 24
				break;
 26a:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,PinNumber);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPinValue+0xc6>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPinValue+0xc2>
 27a:	80 95       	com	r24
 27c:	95 b3       	in	r25, 0x15	; 21
 27e:	89 23       	and	r24, r25
 280:	85 bb       	out	0x15, r24	; 21
				break;
 282:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,PinNumber);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_SetPinValue+0xde>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_SetPinValue+0xda>
 292:	80 95       	com	r24
 294:	92 b3       	in	r25, 0x12	; 18
 296:	89 23       	and	r24, r25
 298:	82 bb       	out	0x12, r24	; 18
 29a:	08 95       	ret

0000029c <main>:
#include "DC_MOTOR_interface.h"
#include "util/delay.h"

int main(void)
{
DCM_Init();
 29c:	0e 94 36 00 	call	0x6c	; 0x6c <DCM_Init>
    while (1) 
    {
		DCM_RotateCW();
 2a0:	0e 94 41 00 	call	0x82	; 0x82 <DCM_RotateCW>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	2f e7       	ldi	r18, 0x7F	; 127
 2a6:	8a e1       	ldi	r24, 0x1A	; 26
 2a8:	96 e0       	ldi	r25, 0x06	; 6
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0xe>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x18>
 2b4:	00 00       	nop
		_delay_ms(2000);
		DCM_RotateCCW();
 2b6:	0e 94 4c 00 	call	0x98	; 0x98 <DCM_RotateCCW>
 2ba:	2f e7       	ldi	r18, 0x7F	; 127
 2bc:	8a e1       	ldi	r24, 0x1A	; 26
 2be:	96 e0       	ldi	r25, 0x06	; 6
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x24>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x2e>
 2ca:	00 00       	nop
		_delay_ms(2000);
		DCM_Stop();
 2cc:	0e 94 57 00 	call	0xae	; 0xae <DCM_Stop>
 2d0:	2f e7       	ldi	r18, 0x7F	; 127
 2d2:	8a e1       	ldi	r24, 0x1A	; 26
 2d4:	96 e0       	ldi	r25, 0x06	; 6
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x3a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x44>
 2e0:	00 00       	nop
 2e2:	de cf       	rjmp	.-68     	; 0x2a0 <main+0x4>

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
